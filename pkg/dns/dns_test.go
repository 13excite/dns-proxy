package dns

import (
	"fmt"
	"testing"

	"github.com/stretchr/testify/require"
	"go.uber.org/zap"
)

func TestValidateTCPDNSReq(t *testing.T) {
	srv := &Server{logger: zap.S().With("package", "dns-server")}

	testCases := []struct {
		name        string
		req         []byte
		expectedErr error
	}{
		{
			name: "valid request",
			// +tcp  vk.com A
			req: []byte{
				0x00, 0x23,
				0x31, 0x28, 0x01, 0x20,
				0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x76, 0x6b, 0x03, 0x63, 0x6f, 0x6d, 0x00,
				0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x29, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			expectedErr: nil,
		},
		{
			name: "invalid size of request",
			req: []byte{
				0x00, 0x23,
				0x31, 0x28, 0x01, 0x20,
				0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x76, 0x6b, 0x03, 0x63, 0x6f, 0x6d, 0x00,
				0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x29, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			},
			expectedErr: fmt.Errorf("Size is incorrect. expected: 35, got: 38"),
		},
		{
			name: "bad dns request",
			req: []byte{
				0x00, 0x04,
				0x31, 0x28, 0x01, 0x20,
			},
			expectedErr: fmt.Errorf("cannot cast dns packet to layers.DNS"),
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			err := srv.validateTCPDNSReq(tc.req, len(tc.req))
			require.Equal(t, tc.expectedErr, err)
		})
	}
}
